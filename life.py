#!/usr/bin/env python3
import random
import time


# LIVE = '*'
# DEAD = '.'

LIVE = '\u2588'  # \u2588 OR \u2588
DEAD = '\u2591'


def init_state_empty(width, height):
    return [[None]*width for _ in range(height)]


def init_state_random(width, height):
    return [[random.choice((LIVE, DEAD)) for i in range(width)] for j in range(height)]


def init_state_blinker():
    return [
        ['.', '.', '.', '.', '.'],
        ['.', '.', '*', '.', '.'],
        ['.', '.', '*', '.', '.'],
        ['.', '.', '*', '.', '.'],
        ['.', '.', '.', '.', '.'],
    ]

def init_state_toad():
    return [
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '*', '*', '*', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '*', '*', '*', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ]

def init_state_beacon():
    return [
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '*', '*', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '*', '*', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '*', '*', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '*', '*', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ]


def init_state_penta_decathlon():
    return [
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '*', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '*', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '*', '*', '*', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '*', '*', '*', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '*', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '*', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '*', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '*', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '*', '*', '*', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '*', '*', '*', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '*', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '*', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ]


def init_state_glider():
    return [
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '*', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '*', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '*', '*', '*', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ]


def init_state():
    # return init_state_blinker()
    # return init_state_toad()
    # return init_state_beacon()
    # return init_state_penta_decathlon()
    return init_state_glider()


def gen_next(state):
    width = len(state[0])
    height = len(state)
    next_state = init_state_empty(width, height)

    for x in range(height):
        for y in range(width):
            neighbors = 0

            # TODO: fix index wraping like x=-1
            try:
                if state[x-1][y+1] == LIVE: neighbors += 1
            except IndexError:
                pass
            try:
                if state[x-1][y  ] == LIVE: neighbors += 1
            except IndexError:
                pass
            try:
                if state[x-1][y-1] == LIVE: neighbors += 1
            except IndexError:
                pass
            try:
                if state[x  ][y-1] == LIVE: neighbors += 1
            except IndexError:
                pass
            try:
                if state[x+1][y-1] == LIVE: neighbors += 1
            except IndexError:
                pass
            try:
                if state[x+1][y  ] == LIVE: neighbors += 1
            except IndexError:
                pass
            try:
                if state[x+1][y+1] == LIVE: neighbors += 1
            except IndexError:
                pass
            try:
                if state[x  ][y+1] == LIVE: neighbors += 1
            except IndexError:
                pass

            if state[x][y] == LIVE:
                if neighbors <= 1:
                    next_state[x][y] = DEAD
                elif neighbors >= 4:
                    next_state[x][y] = DEAD
                else:
                    next_state[x][y] = LIVE
            else:
                if neighbors == 3:
                    next_state[x][y] = LIVE
                else:
                    next_state[x][y] = DEAD

            # print('')
            # print('state[{}][{}] = {} :: {}'.format(x, y, state[x][y], neighbors))
            # print('next_[{}][{}] = {}'.format(x, y, next_state[x][y]))
            # print(next_state[x][y])

    # print(next_state)
    return next_state


def draw(state):
    print('')
    print('')
    print('')
    print('')
    print('\n'.join([''.join(l) for l in state]))
    return
    print('')
    print('\n'.join([str(l) for l in state]))


def life(limit, wait=1):
    # state = init_state()
    state = init_state_random(160, 38)
    draw(state)
    # draw(init_state_empty())
    # quit()
    for _ in range(limit):
        time.sleep(wait)
        state = gen_next(state)
        draw(state)


if __name__ == '__main__':
    life(100000, wait=0.120)
